import{_ as a,p as s,q as n,a1 as e}from"./framework-9bc128ed.js";const t={},o=e(`<h1 id="vue-js设计与实现" tabindex="-1"><a class="header-anchor" href="#vue-js设计与实现" aria-hidden="true">#</a> Vue.js设计与实现</h1><h2 id="chrome-devtools" tabindex="-1"><a class="header-anchor" href="#chrome-devtools" aria-hidden="true">#</a> Chrome devtools</h2><ul><li>console.warn</li></ul><h2 id="dead-code" tabindex="-1"><a class="header-anchor" href="#dead-code" aria-hidden="true">#</a> dead code</h2><blockquote><p>永远不会被执行的代码</p></blockquote><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="tree-shaking" tabindex="-1"><a class="header-anchor" href="#tree-shaking" aria-hidden="true">#</a> Tree-Shaking</h2><blockquote><p>消除那些永远不会被执行的代码 想要实现 Tree-Shaking，必须满足一个条件，即模块必须是 ESM（ES Module），因为 Tree-Shaking 依赖 ESM 的静态结构</p></blockquote><h4 id="dev" tabindex="-1"><a class="header-anchor" href="#dev" aria-hidden="true">#</a> <code>__DEV__</code></h4><p>构建工具预定义的常量，表示是否为开发环境</p><h4 id="副作用" tabindex="-1"><a class="header-anchor" href="#副作用" aria-hidden="true">#</a> 副作用</h4><blockquote><p>如果一个函数调用会产生副作用，那么就不能将其移除</p></blockquote><p>简单地说，副作用就是，当调用函数的时候会对外部产生影响，例如修改了全局变量。 JavsScript本身是动态语言，想要静态分析哪些代码是 dead code 很有难度，到底会不会产生副作用，只有代码真正运行的时候才能知道</p><p>手动在代码前添加注释 <code>/*#__PURE__*/</code>，rollup.js、webpack等工具就能识别此段代码不会产生副作用</p><h2 id="框架产物" tabindex="-1"><a class="header-anchor" href="#框架产物" aria-hidden="true">#</a> 框架产物</h2><h4 id="根据环境区分" tabindex="-1"><a class="header-anchor" href="#根据环境区分" aria-hidden="true">#</a> 根据环境区分</h4><ul><li>开发环境</li><li>生产环境</li></ul><h4 id="根据使用场景区分" tabindex="-1"><a class="header-anchor" href="#根据使用场景区分" aria-hidden="true">#</a> 根据使用场景区分</h4><ul><li>在HTML页面使用 <code>&lt;script&gt;</code> 标签引入使用 —— IIFE（立即调用的函数表达式）</li></ul><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><ul><li>在HTML页面使用 <code>&lt;script type=&quot;module&quot;&gt;</code> 标签引入 —— ESM（-browser）</li></ul><blockquote><p>带有 -browser 的ESM资源是直接给 <code>&lt;script type=&quot;module&quot;&gt;</code> 使用的</p></blockquote><div class="language-html" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/path/to/vue.esm-browser.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><ul><li>在rollup.js、webpack等构建工具使用 —— ESM（-bundler）</li></ul><blockquote><p>带有 -bundler 的ESM资源是给 rollup.js 或 webpack 等打包工具使用的</p></blockquote><p>rollup.js 或者 webpack，在寻找资源时，如果package.json 中存在 module 字段，那么会优先使用 module 字段指向的资源来代替 main 字段指向的资源</p><div class="language-json" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;index.js&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;dist/vue.runtime.esm-bundler.js&quot;</span>
<span class="token punctuation">}</span>
</code></pre></div><ul><li>在Node.js 中通过 require 引用 - CommonJS</li></ul><h2 id="特性开关" tabindex="-1"><a class="header-anchor" href="#特性开关" aria-hidden="true">#</a> 特性开关</h2><h2 id="错误处理" tabindex="-1"><a class="header-anchor" href="#错误处理" aria-hidden="true">#</a> 错误处理</h2>`,30),p=[o];function c(l,u){return s(),n("div",null,p)}const i=a(t,[["render",c],["__file","Vue.js的设计与实现.html.vue"]]);export{i as default};
