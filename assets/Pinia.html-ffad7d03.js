import{_ as a,p as e,q as t,a1 as n}from"./framework-9bc128ed.js";const s={},i=n(`<h1 id="pinia" tabindex="-1"><a class="header-anchor" href="#pinia" aria-hidden="true">#</a> Pinia</h1><h2 id="pinia是什么" tabindex="-1"><a class="header-anchor" href="#pinia是什么" aria-hidden="true">#</a> Pinia是什么？</h2><p>Vue的专属状态管理库，同时支持 Vue2 和 Vue3。代替Vuex的官方推荐方案。</p><p>更简单的API，支持组合式API风格，提供可靠的 TypeScript 类型推断支持。</p><h2 id="对比vuex" tabindex="-1"><a class="header-anchor" href="#对比vuex" aria-hidden="true">#</a> 对比Vuex</h2><ul><li>弃用 <code>mutation</code></li><li>无需要创建自定义的复杂包装器来支持 TypeScript</li><li>无需要动态添加 Store，它们默认都是动态的</li><li>没有可命名模块（namespaced：true）</li><li>可以使用多个 store（目录一般命名文 <code>stores</code>），而不是 Vuex 的单一 store（Pinia和Vuex可以同时使用）。</li></ul><h2 id="核心概念" tabindex="-1"><a class="header-anchor" href="#核心概念" aria-hidden="true">#</a> 核心概念</h2><h3 id="store" tabindex="-1"><a class="header-anchor" href="#store" aria-hidden="true">#</a> Store</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>推荐使用Store的名字，组合式函数风格命名，如 <code>useUserStore</code></p></div><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>defineStore<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pinia&#39;</span>

<span class="token comment">// user 应该是你的应用中的唯一id</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> useUserStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token comment">// 其他配置...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h4 id="选项式-组合式-语法" tabindex="-1"><a class="header-anchor" href="#选项式-组合式-语法" aria-hidden="true">#</a> 选项式/组合式 语法</h4><table><thead><tr><th>Store</th><th>选项式（data）</th><th>组合式（setup）</th></tr></thead><tbody><tr><td>state</td><td>data</td><td>ref()</td></tr><tr><td>getters</td><td>computed</td><td>computed()</td></tr><tr><td>action</td><td>methods</td><td>function()</td></tr></tbody></table><h3 id="getter" tabindex="-1"><a class="header-anchor" href="#getter" aria-hidden="true">#</a> Getter</h3><h3 id="action" tabindex="-1"><a class="header-anchor" href="#action" aria-hidden="true">#</a> Action</h3>`,14),r=[i];function o(d,c){return e(),t("div",null,r)}const h=a(s,[["render",o],["__file","Pinia.html.vue"]]);export{h as default};
