import{_ as e,p as c,q as a,a1 as r}from"./framework-9bc128ed.js";const t={},d=r(`<h1 id="在-idea-中使用-git" tabindex="-1"><a class="header-anchor" href="#在-idea-中使用-git" aria-hidden="true">#</a> 在 IDEA 中使用 git</h1><h2 id="cherry-pick" tabindex="-1"><a class="header-anchor" href="#cherry-pick" aria-hidden="true">#</a> cherry-pick</h2><p>当你和一群程序员一起工作时，无论项目大小，处理多个 Git 分支之间的变更都会变得很困难。</p><p>有时你不想将整个 Git 分支合并到另一个分支，而是想选择并移动几个特定的提交，这个过程被称为 <code>cherry-pick</code></p><h4 id="一些报错" tabindex="-1"><a class="header-anchor" href="#一些报错" aria-hidden="true">#</a> 一些报错</h4><div class="language-text" data-ext="text"><pre class="language-text"><code>Your local changes will be overwritten by cherry-pick. 
Commit your changes or stash them to proceed.
</code></pre></div><p>本地有未提交的改动，可以选择先执行 <code>commit</code>，再 执行 <code>cherry pick</code>，如果未提交的改动你暂时不想 <code>commit</code>，也可以使用 <code>Shelve Changes</code> 将其搁置，在执行 <code>cherry pick</code>后，通过 <code>Unshelve</code> 恢复</p>`,7),o=[d];function i(h,n){return c(),a("div",null,o)}const l=e(t,[["render",i],["__file","IDEA.html.vue"]]);export{l as default};
